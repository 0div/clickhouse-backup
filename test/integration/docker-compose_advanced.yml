services:
  sshd:
    image: docker.io/panubo/sshd:latest
    container_name: sshd
    environment:
      SSH_ENABLE_ROOT: "true"
      SSH_ENABLE_PASSWORD_AUTH: "true"
    command: sh -c 'echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && echo "LogLevel DEBUG3" >> /etc/ssh/sshd_config && echo "root:JFzMHfVpvTgEd74XXPq6wARA2Qg3AutJ" | chpasswd && /usr/sbin/sshd -D -e -f /etc/ssh/sshd_config'
    networks:
      - clickhouse-backup

#  ftp:
#    image: docker.io/fauria/vsftpd:latest
#    container_name: ftp
#    environment:
#      FTP_USER: test_backup
#      FTP_PASS: test_backup
#      PASV_ENABLE: "YES"
#      PASV_ADDRESS: "ftp"
#      PASV_ADDR_RESOLVE: "YES"
#      PASV_MIN_PORT: 21100
#      PASV_MAX_PORT: 21110
#    networks:
#      - clickhouse-backup

  ftp:
    image: docker.io/iradu/proftpd:latest
    container_name: ftp
    environment:
      FTP_USER_NAME: "test_backup"
      FTP_USER_PASS: "test_backup"
      FTP_MASQUERADEADDRESS: "yes"
      FTP_PASSIVE_PORTS: "21100 31100"
    networks:
      - clickhouse-backup

  minio:
    image: docker.io/bitnami/minio:${MINIO_VERSION:-latest}
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: access-key
      MINIO_SECRET_KEY: it-is-my-super-secret-key
      MINIO_DEFAULT_BUCKETS: 'clickhouse'
      MINIO_ROOT_USER: access-key
      MINIO_ROOT_PASSWORD: it-is-my-super-secret-key
    volumes:
      - ./minio_nodelete.sh:/bin/minio_nodelete.sh
    networks:
      - clickhouse-backup

# todo need to reproduce download after upload
#  gcs:
#    image: fsouza/fake-gcs-server:latest
#    container_name: gcs
#    entrypoint:
#      - /bin/sh
#    command:
#      - -c
#      - "mkdir -p /storage/altinity-qa-test && fake-gcs-server -scheme http -port 8080 -public-host gsc:8080"
#    networks:
#      - clickhouse-backup


  azure:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: azure
    hostname: devstoreaccount1.blob.azure
    networks:
      - clickhouse-backup

  mysql:
    image: docker.io/mysql:${MYSQL_VERSION:-latest}
    command: --default-authentication-plugin=mysql_native_password --gtid_mode=on --enforce_gtid_consistency=ON
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "root"
    ports:
      - "3306:3306"
    networks:
      - clickhouse-backup
    healthcheck:
      test: mysqladmin -p=root ping -h localhost
      timeout: 20s
      retries: 10

  pgsql:
    image: docker.io/postgres:${PGSQL_VERSION:-latest}
    container_name: pgsql
    environment:
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: "root"
      # to allow connection from clickhouse 21.3
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - "5432:5432"
    networks:
      - clickhouse-backup
    command: [ "postgres", "-c", "wal_level=logical" ]
    healthcheck:
      test: pg_isready
      timeout: 20s
      retries: 10

  zookeeper:
    image: docker.io/clickhouse/clickhouse-keeper:${CLICKHOUSE_KEEPER_VERSION:-latest-alpine}
    container_name: zookeeper
    volumes:
      - ./clickhouse-keeper.xml:/etc/clickhouse-keeper/conf.d/clickhouse-keeper.xml
      - /var/lib/clickhouse
    networks:
      - clickhouse-backup
    healthcheck:
      test: bash -c 'if [[ "$$(echo 'ruok' | nc 127.0.0.1 2181)" == "imok" ]]; then exit 0; else exit 1; fi'
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 2s


  clickhouse:
    image: docker.io/${CLICKHOUSE_IMAGE:-yandex/clickhouse-server}:${CLICKHOUSE_VERSION:-19.17}
    container_name: clickhouse
    user: root
    environment:
      CLICKHOUSE_VERSION: ${CLICKHOUSE_VERSION:-19.17}
      TZ: UTC
      LOG_LEVEL: "${LOG_LEVEL:-info}"
      S3_DEBUG: "${S3_DEBUG:-false}"
      GCS_DEBUG: "${GCS_DEBUG:-false}"
      FTP_DEBUG: "${FTP_DEBUG:-false}"
      SFTP_DEBUG: "${SFTP_DEBUG:-false}"
      CLICKHOUSE_DEBUG: "${CLICKHOUSE_DEBUG:-false}"
      GOCOVERDIR: "/tmp/_coverage_/"
#      STORAGE_EMULATOR_HOST: "http://gsc:8080"
#      GOOGLE_API_USE_CLIENT_CERTIFICATE: "false"
    volumes:
      - ./backup-user.xml:/etc/clickhouse-server/users.d/backup-user.xml
      - ./enable-access_management.xml:/etc/clickhouse-server/users.d/enable-access_management.xml
      - ${CLICKHOUSE_BACKUP_BIN:-../../clickhouse-backup/clickhouse-backup-race}:/usr/bin/clickhouse-backup
      - ./credentials.json:/etc/clickhouse-backup/credentials.json
      - ./server.crt:/etc/clickhouse-server/server.crt
      - ./server.key:/etc/clickhouse-server/server.key
      - ./dhparam.pem:/etc/clickhouse-server/dhparam.pem
      - ./ssl.xml:/etc/clickhouse-server/config.d/ssl.xml
      - ./cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      - ./dynamic_settings.sh:/docker-entrypoint-initdb.d/dynamic_settings.sh
      - ./_coverage_/:/tmp/_coverage_/
# uncomment only for local debug
      - ./install_delve.sh:/tmp/install_delve.sh
# uncomment only when you need clickhouse logs
#      - ./clickhouse-server.log:/var/log/clickhouse-server/clickhouse-server.log
#      - ./clickhouse-server.err.log:/var/log/clickhouse-server/clickhouse-server.err.log
    ports:
      - "8123:8123"
      - "9000:9000"
      - "7171:7171"
# uncomment for delve debugger
      - "40001:40001"
    networks:
      - clickhouse-backup
    links:
      - zookeeper
      - minio
      - sshd
      - mysql
      - pgsql
      - ftp
      - azure
#      - gcs
    healthcheck:
      test: clickhouse client -q "SELECT 1"
      interval: 10s
      timeout: 2s
      retries: 30
      start_period: 5s
    depends_on:
      mysql:
        condition: service_healthy
      pgsql:
        condition: service_healthy
      zookeeper:
        condition: service_healthy

  all_services_ready:
    image: hello-world
    depends_on:
      clickhouse:
        condition: service_healthy

networks:
  clickhouse-backup:
